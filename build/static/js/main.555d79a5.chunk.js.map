{"version":3,"sources":["DAO/apiConfigs.js","DAO/user.DAO.js","store/user.store.js","DAO/image.DAO.js","DAO/audio.DAO.js","DAO/text.DAO.js","store/upload.store.js","components/navbar.jsx","components/register.jsx","components/login.jsx","components/upload.jsx","store/image.store.js","components/imageTable.jsx","components/view.jsx","app.jsx","serviceWorker.js","index.js"],"names":["apiConfigs","userAPI","user","axios","post","email","instance","UserStore","initialState","status","login","register","extendObservable","this","action","cb","then","res","catch","err","console","log","data","sessionStorage","setItem","logout","imageAPI","withCredentials","pageNumber","size","get","params","audioAPI","textAPI","UploadStore","uploadLoading","loaded","username","type","Navbar","observer","props","userStore","uploadStore","getItem","logoutUser","removeItem","authLinks","className","to","onClick","onLogout","bind","guestLinks","sign","id","Component","Register","state","name","password","password_confirm","errors","handleInputChange","handleSubmit","e","setState","target","value","preventDefault","registerUser","history","push","onSubmit","placeholder","onChange","Login","loginUser","Upload","maxSelectFile","event","files","length","alert","checkFileSize","x","z","onExtetionHandler","object","refs","ChouseFile","object1","Destination","choose","ext","onDescriptionHendler","description","onChangeHandler","selectedFile","isSelected","onClickHandler","FormData","append","uploadImage","source","ref","disabled","accept","multiple","ImageStore","metadata","path","metadatas","ImageTable","componentDidMount","imageStore","getImages","showModal","show","drawFields","map","item","index","key","draw","scope","alt","src","FileSize","ImageWidth","ImageHeight","onpageChange","prevPage","disable","View","changeFileType","fileType","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.555d79a5.chunk.js","sourcesContent":["const apiConfigs = {\n    imgUrl:   \"http://localhost:54545/upload/image\",\n    videoUrl: \"http://localhost:54545/upload/video\",\n    audioUrl: \"http://localhost:54545/upload/audio\",\n    textUrl:  \"http://localhost:54545/upload/text\",\n    userLoginUrl:      \"http://localhost:54545/users/login\",\n    userLogoutUrl:     \"http://localhost:54545/users/logout\",\n    userRegisterUrl:  \"http://localhost:54545/users/register\",\n}\n\nexport {apiConfigs};","import axios from 'axios';\nimport { apiConfigs} from './apiConfigs'\n\nexport const userAPI = {\n    loginUser(user) {\n        return axios.post(apiConfigs.userLoginUrl, user)\n    },\n    logoutUser(email) {\n        return axios.post(apiConfigs.userLogoutUrl, email);\n    },\n    registerUser(user) {\n        return axios.post(apiConfigs.userRegisterUrl, user)\n    }\n}\n","import {extendObservable, action} from 'mobx';\nimport { userAPI } from '../DAO/user.DAO';\n\nlet instance = null\n\nclass UserStore {\n    initialState = {\n        status: '',\n        login: false,\n        register: '',\n    }\n\n    constructor () {\n        extendObservable(this, this.initialState);\n        if (!instance) {\n            instance = this;\n        }\n        return instance;\n    }\n\n    @action\n    registerUser = (user, cb) => {\n        userAPI.registerUser(user)\n        .then((res) => {\n            this.register = true;\n            cb && cb();\n        })\n        .catch((err) => console.log(err)\n        );\n    }\n\n    @action\n    loginUser = (user, cb) => {\n        userAPI.loginUser(user)\n            .then((res) => {\n                console.log(res);\n                if(res.status === 200) {\n                    this.login = true;\n                    this.status = res.status;\n                    const { email } = res.data;\n                    sessionStorage.setItem('email', email);\n                    cb && cb();\n                } else {\n                    this.status = res.status;\n                }\n            })\n            .catch((err) => console.log(err)\n            );\n    }\n    \n    @action\n    logoutUser = (email) => {\n        userAPI.logoutUser(email)\n            .then((res) => {\n                this.login = false;\n                this.logout = true;    \n            })\n            .catch((err) => console.log(err)\n            );\n    }\n}\n\nexport { UserStore };","import axios from 'axios';\nimport { apiConfigs } from './apiConfigs'\n\nexport const imageAPI = {\n    uploadImage(data) {\n        return axios.post(apiConfigs.imgUrl, data, { withCredentials: true })\n    },\n\n    getImages(pageNumber, size) {\n        return axios.get(apiConfigs.imgUrl, {\n            withCredentials: true, params: {\n                pageNumber: pageNumber,\n                size: size\n            }\n        })\n    },\n\n    deleteImage(name) {\n        return axios.delete(apiConfigs.imgUrl, {\n            data: {\n                name: name\n            }\n        })\n    },\n}\n","import axios from 'axios';\nimport {apiConfigs} from './apiConfigs'\nexport const audioAPI = {\n    uploadAudio(data) {\n        return axios.post(apiConfigs.audioUrl, data, { withCredentials: true })\n    },\n\n    getAudios(pageNumber, size) {\n        return axios.get(apiConfigs.audioUrl, {\n            withCredentials: true, params: {\n                pageNumber: pageNumber,\n                size: size\n            }\n        })\n    },\n\n    deleteAudio(name) {\n        return axios.delete(apiConfigs.audioUrl, {\n            data: {\n                name: name\n            }\n        })\n    },\n}","\nimport axios from 'axios';\nimport { apiConfigs } from './apiConfigs'\n\nexport const textAPI = {\n    uploadText(data) {\n        return axios.post(apiConfigs.textUrl, data, { withCredentials: true })\n    },\n\n    getTexts(pageNumber, size) {\n        return axios.get(apiConfigs.textUrl, {\n            withCredentials: true, params: {\n                pageNumber: pageNumber,\n                size: size\n            }\n        })\n    },\n\n    deleteText(name) {\n        return axios.delete(apiConfigs.textUrl, {\n            data: {\n                name: name\n            }\n        })\n    },\n}\n","import { extendObservable, action } from 'mobx';\nimport { imageAPI } from '../DAO/image.DAO';\nimport { audioAPI } from '../DAO/audio.DAO';\nimport { textAPI } from '../DAO/text.DAO';\n\n\nlet instance = null\n\nclass UploadStore {\n    static initialState = {\n        status: '',\n        uploadLoading: false\n    }\n    constructor() {\n        extendObservable(this, {\n            status: '',\n            uploadLoading: false,\n            loaded: 0,\n            username: '',\n            err: false\n        });\n        if (!instance) {\n            instance = this;\n        }\n        return instance;\n    }\n\n    @action\n    uploadImage = (type, data, cb) => {\n        this.uploadLoading = true;\n        this.loaded = 0;\n        switch (type) {\n            case \"image\":\n                imageAPI.uploadImage(data)\n                    .then((res) => {\n                        this.loaded = 100;\n                        this.status = res.status;\n                        this.uploadLoading = false;\n                    })\n                    .catch((err) => {\n                        this.err = true;\n                        cb && cb()\n                    })\n                break;\n            case \"audio\":\n                audioAPI.uploadAudio(data)\n                    .then((res) => {\n                        this.loaded = 100;\n                        this.status = res.status;\n                        this.uploadLoading = false;\n                    })\n                    .catch((err) => {\n                        this.err = true;\n                        cb && cb()\n                    })\n                break;\n            case \"text\":\n                textAPI.uploadText(data)\n                    .then((res) => {\n                        this.loaded = 100;\n                        this.status = res.status;\n                        this.uploadLoading = false;\n                    })\n                    .catch((err) => {\n                        this.err = true;\n                        cb && cb()\n                    })\n                break;\n            default:\n                break;\n        }\n\n\n    }\n}\n\nexport { UploadStore };","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { observer } from 'mobx-react';\nimport {UserStore} from '../store/user.store';\nimport {UploadStore} from '../store/upload.store';\n\n\n@observer\nclass Navbar extends Component {\n    constructor(props) {\n        super(props); \n        this.userStore = new UserStore();    \n        this.uploadStore = new UploadStore();    \n\n    }\n\n    onLogout() {\n        const email = {\"email\": sessionStorage.getItem('email')};\n        this.userStore.logoutUser(email);\n        sessionStorage.removeItem('email'); \n    }\n\n    render() {\n        const authLinks = (\n            <ul className=\"navbar-nav ml-auto\">\n                <Link  className=\"nav-link\" to=\"/view\" >\n                     View All\n                </Link>\n                <Link  className=\"nav-link\" to=\"/upload\" >\n                     Upload\n                </Link>\n                <Link  className=\"nav-link\" to=\"/login\" onClick={this.onLogout.bind(this)}>\n                     Logout\n                </Link>\n            </ul>\n        )\n      const guestLinks = (\n        <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/register\">Sign Up</Link>\n            </li>\n            <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/login\" onClick={this.sign}>Sign In</Link>\n            </li>\n        </ul>\n      )\n        return(\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    {this.userStore.login && !this.uploadStore.err? authLinks : guestLinks}\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport {Navbar};","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { UserStore } from '../store/user.store';\n\n@observer\nclass Register extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n            password_confirm: '',\n            errors: {}\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.userStore = new UserStore();\n    }\n\n    handleInputChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const user = {\n            name: this.state.name,\n            email: this.state.email,\n            password: this.state.password,\n            password_confirm: this.state.password_confirm\n        }\n        this.userStore.registerUser(user, () => this.props.history.push('/login'));\n    }\n\n    render() {\n        return (\n            <div className=\"container\" id=\"container\">\n                <div className=\"row\">\n                    <div className=\"offset-md-5 col-md-2\">\n                        <h2>Registration</h2>\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"form-group\">\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Name\"\n                                    name=\"name\"\n                                    onChange={this.handleInputChange}\n                                    value={this.state.name}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <input\n                                    type=\"email\"\n                                    placeholder=\"Email\"\n                                    name=\"email\"\n                                    onChange={this.handleInputChange}\n                                    value={this.state.email}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <input\n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    name=\"password\"\n                                    onChange={this.handleInputChange}\n                                    value={this.state.password}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <input\n                                    type=\"password\"\n                                    placeholder=\"Confirm Password\"\n                                    name=\"password_confirm\"\n                                    onChange={this.handleInputChange}\n                                    value={this.state.password_confirm}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <button type=\"submit\" className=\"btn btn-primary\">\n                                    Register User\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\n\nexport { Register };","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { UserStore } from '../store/user.store';\n\n@observer\nclass Login extends Component {\n    constructor() {\n        super();\n        this.state = {\n            email: '',\n            password: '',\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.userStore = new UserStore();\n    }\n\n    handleInputChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const user = {\n            email: this.state.email,\n            password: this.state.password,\n        }\n        this.loginUser(user);\n    }\n\n    loginUser = (user) => {\n        this.userStore.loginUser(user, () => this.props.history.push('/upload'));\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\" id=\"container\" >\n                <div className=\"row\">\n                    <div className=\"offset-md-5 col-md-4\">\n                    <h2>Login</h2>\n                    <form onSubmit={this.handleSubmit}>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"email\"\n                                placeholder=\"Email\"\n                                name=\"email\"\n                                onChange={this.handleInputChange}\n                                value={this.state.email}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                placeholder=\"Password\"\n                                name=\"password\"\n                                onChange={this.handleInputChange}\n                                value={this.state.password}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <button type=\"submit\" className=\"btn btn-primary\" >\n                                Login User\n                    </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div >\n        )\n    }\n}\n\nexport { Login };","import React, { Component } from 'react';\nimport {observer} from 'mobx-react';\nimport { UploadStore } from '../store/upload.store';\n\n@observer \nclass Upload extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            description: '',\n            selectedFile: null,                                                                                                                       \n            loaded:0,\n            ext: '',\n            choose: false,\n            isSelected: false,\n            type: '',\n            source: null,\n        }\n\n        this.uploadStore = new UploadStore();\n\n    }\n\n    maxSelectFile = (event) => {\n        let files = event.target.files\n            if (files.length > 1) { \n                const msg = 'Only 1 images can be uploaded at a time';\n                event.target.value = null;\n                alert(msg);\n                return false;\n            }\n        return true;\n    }\n\n    checkFileSize=(event)=>{\n        let files = event.target.files\n        let size = 250000000 \n        let err = []; \n        for(let x = 0; x<files.length; x++) {\n            if (files[x].size > size) {\n                err[x] = files[x].type+'is too large, please pick a smaller file\\n';\n            }\n        };\n        for(let z = 0; z<err.length; z++) {// if message not same old that mean has error \n            event.target.value = null\n        }\n        return true;\n    }\n\n    onExtetionHandler = event => {\n        this.setState({\n            loaded: 0,\n        })\n        let object = this.refs.ChouseFile;\n        let object1 = this.refs.Destination;\n        object.value = \"\";\n        object1.value = \"\";\n        \n        this.setState({\n            choose: true, \n        })\n        if(event.target.value === \"image\") {\n            this.setState({\n            ext: \".jpg, .png, .gif\" ,\n            type: \"image\"\n            })\n        } else if(event.target.value === \"text\") {\n            this.setState({\n            ext: \".pdf, .css, .html, .txt, .odt\" ,\n            type: \"text\"\n            })\n        }\n        else if(event.target.value === \"audio\") {\n            this.setState({\n            ext: \".m4a\",\n            type: \"audio\"\n            })\n        }\n    }\n\n    onDescriptionHendler = event => {\n        this.setState({\n            description: event.target.value\n        })\n    }\n\n    onChangeHandler = event => {\n        this.setState({\n            loaded:0,\n        })\n        let files = event.target.files;\n        if(this.maxSelectFile(event) &&    this.checkFileSize(event)){ //&& this.checkMimeType(event) \n            this.setState({\n                selectedFile: files,\n                loaded:0,\n                isSelected:true,\n            }) \n        }\n    }\n\n    onClickHandler = () => {\n        const data = new FormData() \n        data.append('file', this.state.selectedFile[0]);\n        data.append(\"description\", this.state.description);\n        data.append(\"email\", \"email\");\n        this.uploadStore.uploadImage(this.state.type, data, () => this.props.history.push('/login'));\n        this.setState({\n            loaded: 100,\n            isSelected: false\n        })\n    }\n\n    render() {\n        const { uploadLoading } = this.uploadStore;\n\n        return (\n            <div className=\"container\">\n                <div> <h1>{ this.props.name}</h1></div>\n                <div className=\"row\">\n                    <div className=\"offset-md-3 col-md-6\">\n                        <div className=\"form-group files\">\n                            <label>Upload Your File </label>\n                            <input \n                            ref=\"ChouseFile\" \n                            type=\"file\" \n                            className=\"form-control\" \n                            disabled={!this.state.choose}\n                            accept={this.state.ext}  \n                            multiple \n                            onChange={this.onChangeHandler}/>\n                        </div>  \n                        <div>\n                            <input type=\"radio\" name=\"radio\" onClick={this.onExtetionHandler} value=\"image\"/> Image<br/>\n                            <input type=\"radio\" name=\"radio\" onClick={this.onExtetionHandler} value=\"text\"/> Text<br/>\n                            <input type=\"radio\" name=\"radio\" onClick={this.onExtetionHandler} value=\"audio\"/> Audio<br/>\n                        </div>\n                        <div className=\"form-group\">\n                            {this.state.loaded} %\n                        </div> \n                        <div >\n                            <input ref=\"Destination\" placeholder = \"Enter your description\" onChange={this.onDescriptionHendler} ></input><br/><div><p></p></div>\n                        </div>\n                        <button type=\"button\" className=\"btn btn-success btn-block\" disabled={!this.state.isSelected} onClick={this.onClickHandler}>Upload</button>\n                    </div>\n                </div>\n                <h1>{uploadLoading}</h1>\n            </div>\n        );\n    }\n}\n\nexport  {Upload};","import { extendObservable, action } from 'mobx';\nimport { imageAPI } from '../DAO/image.DAO';\n\nclass ImageStore {\n    constructor () {\n        extendObservable(this, {\n            status: '',\n            metadata: '',\n            description: '',\n            path: '',\n            name: '',\n            err: false\n        });\n    }\n\n    @action\n    getImages = (pageNumber, size) => {\n        imageAPI.getImages(pageNumber, size)\n            .then((res) => {\n                if(res.data.name.length < 5){\n                    this.err = true;\n                    this.status = res.status;\n                    this.description = res.data.description\n                    this.name = res.data.name;\n                    this.path = res.data.path;\n                    this.metadata = res.data.metadatas;\n                } else {\n                    this.err = false;\n                    this.status = res.status;\n                    this.description = res.data.description\n                    this.name = res.data.name;\n                    this.path = res.data.path;\n                    this.metadata = res.data.metadatas;\n                }\n            })\n            .catch((err) => this.err = true);\n    }\n}\n\nexport {ImageStore}","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { ImageStore } from '../store/image.store';\n\n@observer\nclass ImageTable extends Component {\n    constructor(props) {\n        super(props);\n        this.imageStore = new ImageStore();\n        this.state = {\n            name: this.imageStore.name,\n            pageNumber: 1,\n            disable: false,\n            show: true,\n            size: 5,\n        }\n    }\n\n    componentDidMount = () => {\n        this.imageStore.getImages(this.state.pageNumber, this.state.size);\n    }\n\n    showModal = () => {\n        this.setState({\n            show: !this.state.show\n        });\n    }\n\n    drawFields = () => {\n        const fields = ['', 'Image', 'Name', 'Size', 'Width', 'Height', 'Description'];\n        return fields.map((item, index) => {\n            return (\n                <th key={index}>\n                    {item}\n                </th>\n            )\n        })\n    }\n\n    draw = (name, description, path, metadata) => {\n        if( name && metadata){\n            return metadata.map((item, index) => {\n                return (\n                    <tr  className=\"text-center\" key={index}>\n                        <th scope=\"row\">{index + 1}</th>\n                        <td id=\"image\">\n                            <img className=\"image\" alt=\"sss\" src={path[index]}/>\n                        </td>\n                        <td>{name[index]}</td>                \n                        <td>{item.FileSize} Kb</td>\n                        <td>{item.ImageWidth}</td>\n                        <td>{item.ImageHeight}</td>\n                        <td>{description[index]}</td>\n                    </tr>\n                )\n            })\n        }\n    }\n\n    onpageChange = (index, err) => () => {\n        let prevPage = this.state.pageNumber;\n        switch (index) {\n            case -1:\n                if (prevPage > 1) {\n                    const data = {\n                        pageNumber: this.state.pageNumber - 1,\n                        size: this.state.size,\n                    }\n                    this.imageStore.getImages(this.state.pageNumber - 1, this.state.size);\n                    this.setState({\n                        pageNumber: prevPage - 1,\n                        disable: false\n                    })\n                }\n                break;\n            case 1:\n                if (err) {\n                    this.setState({\n                        disable: true\n                    })\n                } else {\n                    const data = {\n                        pageNumber: this.state.pageNumber + 1,\n                        size: this.state.size,\n                    }\n                    this.imageStore.getImages(this.state.pageNumber + 1, this.state.size);\n                    this.setState({\n                        pageNumber: prevPage + 1,\n                    })\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    render() {\n\n        const { name, description, path, metadata, err } = this.imageStore;\n        return (\n            <div>\n                <table className=\"table table-bordered\">\n                    <thead className=\"text-center\">\n                        <tr>\n                            {this.drawFields()}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.draw(name, description, path, metadata)}\n                    </tbody>\n                </table>\n                <div className=\"pagination\">\n                    <button className=\"btn\" onClick={this.onpageChange(-1, err)} > &laquo; </button>\n                    <button className=\"btn btn-info\" onClick={this.onpageChange(0, err)}> {this.state.pageNumber} </button>\n                    <button className=\"btn\" onClick={this.onpageChange(1, err)} disabled={this.state.disable} > &raquo; </button>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport { ImageTable };\n","import React, { Component } from 'react';\nimport {ImageTable} from './imageTable';\n\nclass View extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fileType: \"image\",\n        }\n    }\n\n    changeFileType = (name) => () => {\n        this.setState({\n            fileType: name\n        });\n    }\n    \n    show = () => {\n        switch(this.state.fileType) {\n            case \"image\":          \n                return <ImageTable/>;\n            case \"text\": \n                return <div> TextTable</div>;\n            case \"video\": \n                return <div> VideoTable</div>;\n            case \"audio\": \n                return <div> AudeoTable</div>;\n            default:\n                return <ImageTable/>;            \n        }\n    }\n\n    render() {        \n        return (\n            <div>\n                <table className=\"table table-bordered\">\n                    <thead  className=\"text-center\"> \n                        <tr>\n                        <th scope=\"col\">\n                        </th>\n                        <th scope=\"col\">\n                            <button type=\"button\" className=\"btn btn-info\" onClick={this.changeFileType(\"image\")}>Image</button>\n                        </th>\n                        <th scope=\"col\">\n                            <button type=\"button\" className=\"btn btn-info\" onClick={this.changeFileType(\"video\")}>Video</button>                        \n                        </th>\n                        <th scope=\"col\">\n                            <button type=\"button\" className=\"btn btn-info\" onClick={this.changeFileType(\"audio\")}>Audio</button>\n                        </th>\n                        <th scope=\"col\">\n                            <button type=\"button\" className=\"btn btn-info\" onClick={this.changeFileType(\"text\")}>Text</button>\n                        </th> \n                        </tr>\n                    </thead>\n                </table>\n                {this.show()}\n            </div>\n        )\n    }\n\n}\n\nexport {View};","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {Navbar} from './components/navbar';\nimport {Register} from './components/register';\nimport {Login} from './components/login';\nimport {Upload} from './components/upload';\nimport {View} from './components/view';\n\nclass  App extends Component {\n  render() {\n    return (\n        <Router>\n            <div>\n                <Navbar/>\n                <div className=\"container\" >\n                    <Route exact path=\"/register\" component={ Register } />\n                    <Route exact path=\"/login\"  component={ Login } />\n                    <Route exact path=\"/view\" component={View} />\n                    <Route exact path=\"/upload\" component={Upload}/>\n                </div>\n            </div>\n        </Router>\n    );\n}\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}